# 🎭 Sybau Picture - Cursor 开发规则

## 🧠 AI记忆要点 - 立即必知信息
**每次接手项目时，AI必须立即理解以下关键信息：**

### ⚠️ **重要认知校正**
- ❌ **不存在模拟环境** - 模拟模式已完全移除
- ✅ **只有开发和生产环境** - 双环境架构
- ✅ **isMockMode始终为false** - 不再使用任何模拟功能
- ✅ **智能环境管理** - 通过lib/env-manager.ts统一管理

### 🎯 项目核心身份
- **项目名称**: Sybau Picture - AI图片生成平台
- **项目愿景**: Stay Young, Beautiful and Unique
- **当前版本**: v3.0 - 生产就绪版
- **核心特色**: 智能环境管理系统 + 中文命令操作
- **技术栈**: Next.js 14 + TypeScript + Tailwind CSS + Prisma + Stripe

### ✅ 当前系统状态
- 🔐 **Google OAuth认证**: 完全正常，用户登录无问题
- 💳 **Stripe支付系统**: 订阅功能完整运行
- 🤖 **AI图片生成**: Fal AI集成正常工作
- 🌍 **多语言支持**: 中英文切换完全正常
- ⚡ **智能环境管理**: 双环境系统运行完美
- 🛡️ **代码纯洁度**: 达到生产标准，可安全推送GitHub

### 🔧 核心环境管理命令
```bash
node scripts/smart-env.js 开发     # 切换开发环境
node scripts/smart-env.js 生产     # 切换生产环境
node scripts/smart-env.js 状态     # 查看环境状态
npm run start:smart              # 智能启动
```

### 📚 关键文档位置
- `docs/ai-context-memory.md` - 完整的AI记忆管理文档
- `config/env.template` - 环境变量配置模板
- `lib/env-manager.ts` - 环境管理核心代码

---

## 🌍 项目概述
Sybau Picture 是一个基于 Next.js 14 的 AI 图片生成平台，采用 TypeScript、Tailwind CSS、Prisma、Stripe 等技术栈。本项目支持 Google OAuth 认证、AI 图片生成、订阅付费等功能。

## 🔧 开发环境管理

### 环境切换命令
```bash
# 中文命令支持
node scripts/smart-env.js 开发    # 切换到开发环境
node scripts/smart-env.js 生产    # 切换到生产环境
node scripts/smart-env.js 状态    # 查看环境状态

# 英文命令支持
npm run env:dev                  # 开发环境
npm run env:prod                 # 生产环境
npm run env:status               # 环境状态

# 智能启动（自动端口检查）
npm run start:smart              # 一键启动开发服务器
node scripts/smart-startup.js    # 智能启动脚本
```

### 环境配置说明
- **开发环境**: 使用 localhost:3001，启用调试模式
- **生产环境**: 使用真实域名，关闭调试模式
- **自动管理**: 智能检测端口冲突并自动处理

## 📁 项目结构规范

### 核心目录
```
app/                    # Next.js App Router
├── api/               # API 路由
├── auth/              # 认证页面
├── gallery/           # 画廊功能
├── pricing/           # 定价页面
└── zh/                # 中文本地化

components/            # React 组件
├── ui/               # 基础 UI 组件
├── ImageGenerator.tsx # 图片生成器
└── Navbar.tsx        # 导航栏

lib/                  # 工具库
├── auth.ts           # 认证配置
├── env-manager.ts    # 环境管理
├── stripe.ts         # 支付配置
└── utils.ts          # 工具函数

scripts/              # 开发脚本
├── smart-env.js      # 环境切换
└── smart-startup.js  # 智能启动
```

## 🛠️ 编码规范

### TypeScript 规范
- 严格启用 TypeScript strict 模式
- 为所有函数和组件定义类型
- 使用 interface 而非 type 定义对象类型
- 组件 props 必须定义 interface

### React/Next.js 规范
- 使用函数组件和 React Hooks
- 组件名称使用 PascalCase
- 文件名使用 kebab-case 或 PascalCase
- 使用 App Router 而非 Pages Router

### 样式规范
- 优先使用 Tailwind CSS 类名
- 自定义样式写在组件级别的 CSS 模块中
- 响应式设计：mobile-first 原则

## 🔐 安全规范

### 环境变量管理
```
# 开发环境变量
GOOGLE_CLIENT_ID_DEV=xxx
GOOGLE_CLIENT_SECRET_DEV=xxx
STRIPE_SECRET_KEY_DEV=xxx

# 生产环境变量
GOOGLE_CLIENT_ID_PROD=xxx
GOOGLE_CLIENT_SECRET_PROD=xxx
STRIPE_SECRET_KEY_PROD=xxx
```

### 安全要点
- 绝不在代码中硬编码密钥
- 使用环境变量分离开发/生产配置
- API 路由必须验证用户权限
- 敏感操作需要二次验证

## 🧪 测试与调试

### 开发调试
```bash
# 启动开发模式
npm run start:smart

# 检查环境状态
npm run env:status

# 类型检查
npm run type-check

# 构建检查
npm run build
```

### 错误处理
- 所有 API 路由必须有错误处理
- 用户友好的错误信息
- 开发环境显示详细错误，生产环境隐藏敏感信息

## 🚀 部署规范

### 部署前检查
1. 运行 `npm run build` 确保构建成功
2. 检查环境变量配置完整性
3. 验证数据库连接
4. 测试支付功能

### 部署命令
```bash
# 生产部署
npm run build
npm run start

# Vercel 部署
vercel --prod
```

## 📋 代码提交规范

### Commit 消息格式
```
type(scope): description

feat: 新功能
fix: 修复bug
docs: 文档更新
style: 代码格式
refactor: 代码重构
test: 测试相关
chore: 构建/工具相关
```

### 分支规范
- `main`: 生产分支
- `develop`: 开发分支
- `feature/*`: 功能分支
- `hotfix/*`: 紧急修复分支

## 🎯 开发工作流

### 新功能开发
1. 从 develop 分支创建 feature 分支
2. 使用 `npm run start:smart` 启动开发环境
3. 编写代码并遵循代码规范
4. 提交代码并创建 Pull Request
5. 代码审查通过后合并到 develop

### 环境切换流程
1. 使用 `node scripts/smart-env.js 开发` 切换到开发环境
2. 检查 `npm run env:status` 确认环境状态
3. 使用 `npm run start:smart` 启动服务器
4. 生产部署前切换到生产环境

## 🔍 常见问题解决

### 端口占用问题
```bash
# 自动解决端口冲突
npm run start:smart

# 手动检查端口
netstat -ano | findstr :3001
taskkill /PID <PID> /F
```

### 环境配置问题
```bash
# 检查当前环境
node scripts/smart-env.js 状态

# 重置到开发环境
node scripts/smart-env.js 开发
```

### 依赖问题
```bash
# 清理并重新安装
rm -rf node_modules package-lock.json
npm install
```

## 🌟 最佳实践

### 性能优化
- 使用 Next.js Image 组件优化图片
- 实现组件懒加载
- API 路由添加缓存策略
- 数据库查询优化

### 用户体验
- 添加加载状态指示器
- 实现错误边界组件
- 优化移动端体验
- 国际化支持 (中英文)

### 代码质量
- 定期重构冗余代码
- 添加单元测试
- 使用 ESLint 和 Prettier
- 代码注释清晰明确

## 🎯 中文命令系统 (Cursor AI)

**重要指引：当用户在聊天中使用以下中文命令时，AI必须立即识别并执行相应操作，无需用户确认。**

### 🔧 环境管理命令

#### `/开发` 或 `开发环境` 或 `切换开发`
**立即执行：**
1. 运行：`node scripts/smart-env.js 开发`
2. 启动：`npm run start:smart`
3. 状态：`npm run env:status`
4. 反馈：显示开发环境已启动，包含端口信息

#### `/生产` 或 `生产环境` 或 `切换生产`
**立即执行：**
1. 运行：`node scripts/smart-env.js 生产`
2. 验证：`npm run env:status`
3. 构建：`npm run build`
4. 反馈：显示生产环境配置状态

#### `/状态` 或 `环境状态` 或 `检查状态`
**立即执行：**
1. 运行：`npm run env:status`
2. 检查：`netstat -ano | findstr :3001`
3. 反馈：当前环境详细状态报告

### ⚡ 开发操作命令

#### `/启动` 或 `启动服务器` 或 `开始开发`
**立即执行：**
1. 运行：`npm run start:smart`
2. 检查端口冲突并自动处理
3. 反馈：服务器启动状态和访问地址

#### `/重启` 或 `重启服务器` 或 `重新启动`
**立即执行：**
1. 停止当前服务器进程
2. 重新运行：`npm run start:smart`
3. 反馈：重启完成状态

#### `/停止` 或 `停止服务器` 或 `关闭服务器`
**立即执行：**
1. 查找并终止3001端口进程
2. 确认服务器已停止
3. 反馈：服务器停止状态

### 🛠️ 构建测试命令

#### `/构建` 或 `构建项目` 或 `打包`
**立即执行：**
1. 运行：`npm run type-check`
2. 运行：`npm run build`
3. 反馈：构建结果和错误信息

#### `/测试` 或 `运行测试` 或 `检查代码`
**立即执行：**
1. 运行：`npm run lint`
2. 运行：`npm run type-check`
3. 运行：`npm run test` (如果存在)
4. 反馈：测试结果摘要

#### `/清理` 或 `清理项目` 或 `重置环境`
**立即执行：**
1. 运行：`npm run clean`
2. 删除 node_modules
3. 运行：`npm install`
4. 运行：`npm run db:generate`
5. 反馈：清理和重装完成状态

### 🚀 部署管理命令

#### `/部署` 或 `部署生产` 或 `发布上线`
**立即执行：**
1. 切换生产环境：`node scripts/smart-env.js 生产`
2. 构建项目：`npm run build`
3. 部署：`vercel --prod`
4. 反馈：部署进度和结果

#### `/回滚` 或 `版本回滚` 或 `撤销部署`
**立即执行：**
1. 运行：`vercel --rollback`
2. 反馈：回滚操作结果

### 📋 信息查询命令

#### `/帮助` 或 `帮助信息` 或 `命令列表`
**立即显示：**
- 所有可用中文命令列表
- 快速操作指南
- 项目文档链接

#### `/文档` 或 `查看文档` 或 `项目文档`
**立即显示：**
- README.md 核心内容
- API 文档链接
- 开发流程文档

#### `/日志` 或 `查看日志` 或 `错误日志`
**立即执行：**
1. 检查最近的构建日志
2. 显示错误信息
3. 提供解决建议

#### `/记忆` 或 `AI记忆` 或 `更新记忆`
**立即执行：**
1. 运行：`npm run ai:memory:update`
2. 更新项目状态快照
3. 反馈：AI记忆系统更新状态

#### `/记忆状态` 或 `检查记忆` 或 `记忆检查`
**立即执行：**
1. 运行：`npm run ai:memory:status`
2. 显示AI记忆文件状态
3. 验证关键认知点

### 🎯 智能命令处理规则

#### 1. 命令识别原则
- **模糊匹配**：用户输入包含关键词即可触发
- **中文优先**：优先识别中文命令
- **自动执行**：识别到命令后立即执行
- **错误处理**：命令失败时提供解决方案

#### 2. 多命令组合
用户可以连续使用多个命令：
```
用户: /停止 /清理 /开发
AI: 执行停止服务器 → 清理项目 → 启动开发环境
```

#### 3. 智能建议
根据当前状态智能建议下一步操作：
```
用户: /状态
AI: 当前开发环境运行正常
建议：可以使用 /构建 检查代码，或 /部署 发布到生产环境
```

#### 4. 错误自动修复
命令执行失败时自动尝试修复：
```
启动失败 → 自动检查端口冲突 → 终止冲突进程 → 重新启动
构建失败 → 自动运行类型检查 → 显示具体错误 → 提供修复建议
```

### 📝 命令执行模板

每个命令执行时按以下格式反馈：

```
🎯 执行命令: /开发
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⏳ 正在执行: 切换到开发环境...
✅ 完成: 环境切换成功
⏳ 正在执行: 启动开发服务器...
✅ 完成: 服务器已启动 (http://localhost:3001)

🎉 命令执行完成！
💡 建议: 现在可以开始开发，使用 /构建 检查代码质量
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
```

### 🔍 使用示例

```
用户: /开发
AI: 🎯 执行命令: /开发
    ✅ 环境切换成功
    ✅ 服务器启动 (http://localhost:3001)
    💡 开发环境已就绪，可以开始编码！

用户: 代码改完了，/构建
AI: 🎯 执行命令: /构建
    ✅ TypeScript 检查通过
    ✅ 项目构建成功
    💡 代码质量良好，可以使用 /部署 发布

用户: /部署
AI: 🎯 执行命令: /部署
    ✅ 切换到生产环境
    ✅ 构建生产版本
    ✅ 部署到 Vercel 成功
    🎉 项目已上线！
```

## 📞 技术支持

### 开发团队联系
- 技术问题: GitHub Issues
- 环境问题: 查看项目文档
- 紧急问题: 联系项目维护者

### 有用的命令速查
```bash
# 环境管理
node scripts/smart-env.js 开发|生产|状态

# 智能启动
npm run start:smart

# AI记忆管理
npm run ai:memory:update          # 更新AI记忆
npm run ai:memory:status          # 检查AI记忆状态

# 开发服务器
npm run dev

# 生产构建
npm run build

# 类型检查
npm run type-check
```

---

> 🎭 **Sybau Picture** - Stay Young, Beautiful and Unique
>
> 遵循这些规则，让我们一起构建优秀的 AI 图片生成平台！
